<script type="text/javascript">
  let _scheduledArray = {{ activities.scheduled | tojson }};
  let scheduled = {};
  for (event of _scheduledArray)
    scheduled[event["id"]] = event;

  let groups = {{ activities.groups | tojson }};
  let now = "{{ now() }}";
  let $modal = $('#configure-event');

  // Click on new event
  $(document).on('click', '#new-event', (e) => {
    $modal.find('input[type="text"]').val('');
    $modal.find('input[type="checkbox"]').prop('checked', false);
    $modal.find('input[day]').prop('checked', true);
    $modal.find('input[name="event-enabled"]').prop('checked', true);
    $modal.find('#modal-title').text('New event');
    $modal.find('#error-msg').hide();
    $modal.find('button[name="event-delete"]').hide();
    $modal.modal('show');
  });

  // Click on existing event
  $(document).on('click', 'span[name="edit-event"]', (e) => {
    let $block = $(e.currentTarget).closest('.block');
    let identifier = $block.attr('identifier');
    $modal.attr('identifier', identifier);

    let event = scheduled[identifier];
    $modal.find('[name="event-id"]').val(event.id);
    $modal.find('[name="event-time"]').val(event.time);
    let enabled = !event.disabled && (!event.disabledUntil ||
                                      event.disabledUntil && event.disabledUntil + "T" + event.time >= now);
    $modal.find('input[name="event-enabled"]').prop('checked', enabled);

    disabledUntil = null;
    if (event.disabledUntil)
      disabledUntil = event.disabledUntil;
    $modal.find('[name="event-disable-until"]').val(disabledUntil);

    $modal.find('[name="event-fire-once"]').prop('checked', event.fireOnce | false);

    let commands = event["commands"];
    $modal.find('#commands-td input[type="checkbox"]').prop('checked', false);

    for (var index in commands) {
      let array = commands[index];
      let $container = $('[identifier="' + array[1] + '"]');
      let $input = $container.find('[identifier="' + array[0] + '"]');
      $input.prop('checked', true);
    }

    if (!event.hasOwnProperty("days")) {
      $modal.find('#days-td input[type="checkbox"]').prop('checked', true);
    } else {
      let days = scheduled[identifier]["days"];
      $modal.find('#days-td input[type="checkbox"]').prop('checked', false);

      for (var index in days) {
        let day = days[index];
        let $input = $('[day="' + day + '"]');
        $input.prop('checked', true);
      }
    }

    $modal.find('#modal-title').text('Edit event');
    $modal.find('#error-msg').hide();
    $modal.find('button[name="event-delete"]').show();
    $modal.modal('show');
  });

  // Clockpicker
  let input = $('.clockpicker');
  input.clockpicker({
    autoclose: true,
    placement: 'right',
    align: 'left'
  });

  input.on('click', (e) => {
    input.clockpicker('show');
  });

  // Datepicker
  $('input[data-toggle="datepicker"]').parent().datepicker({
    format: 'yyyy-mm-dd',
    autoclose: true
  });

  // Delete confirmation
  $('[data-toggle=confirmation]').confirmation({
    rootSelector: '[data-toggle=confirmation]',
    container: 'body',
    onConfirm: deleteEvent,
  });

  $(document).on('change', 'input[name="event-fire-once"]', (e) => {
    let $input = $(e.currentTarget);
    if ($input.prop('checked'))
      $modal.find('input[day]').attr('disabled', true);
    else
      $modal.find('input[day]').removeAttr('disabled');
  });

  // Save within modal
  $(document).on('click', 'button[name="event-save"]', (e) => {
    let result = getCommands($modal);
    let groups = result[0];
    let numberOfCommands = result[1];
    let identifier = $modal.attr('identifier');

    let id = $modal.find('input[name="event-id"]').val();
    let time = $modal.find('input[name="event-time"]').val();
    let days = getDays($modal);
    let enabled = $modal.find('input[name="event-enabled"]').prop('checked');
    let disabledUntil = $modal.find('input[name="event-disable-until"]').val();
    let fireOnce = $modal.find('input[name="event-fire-once"]').prop('checked');

    let data = {
      id: id,
      time: time,
      groups: JSON.stringify(groups),
      enabled: enabled
    }

    if (disabledUntil)
      data.disabledUntil = disabledUntil;

    if (fireOnce)
      data.fireOnce = fireOnce;

    // Only append days if not all days are selected
    if (days.length != 7)
      data.days = JSON.stringify(days);

    let endpoint = identifier;
    if (!identifier)
      endpoint = "new";

    $.ajax({
      url: '/schedule/configure/' + endpoint,
      data: data,
      beforeSend: function (xhr) {
        let username = $("input#usr").val();
        let password = $("input#pwd").val();
        xhr.setRequestHeader('Authorization', make_base_auth(username, password));
      },
      success: function(response) { // Update the data client side
        $modal.modal('hide');

        if (identifier) {
          if (identifier != id)
            scheduled[identifier] = null;

          let $block = $('.block[identifier="' + identifier + '"]');
          $block.attr('identifier', id)
          $block.find('span[name="event-id"]').text(id);
          $block.find('span[name="event-time"]').text(time);

          let commandText = numberOfCommands + " command";
          if (numberOfCommands != 1)
            commandText += "s";
          $block.find('span[name="event-commands"]').text(commandText);

          let daysString = days.length == 7 ? "all" : days.length;
          let dayText = daysString + " day";
          if (days.length != 1)
            dayText += "s";
          $block.find('span[name="event-days"]').text(dayText);

          $block.find('input[name="event-enabled"]').prop('checked', enabled);
        } else {
          $newBlock = $(response.html);
          $('#new-event').before($newBlock);
        }
        scheduled[id] = response.data;

        $('#result').fadeIn(0).delay(2000).fadeOut("fast");
      },
      error: function(response) {
        let responseText = null;
        if (response.status == 400)
          responseText = response.responseText;
        else
          responseText = "Something went wrong. Please try again later."

        let $error = $modal.find('#error-msg');
        $error.html(responseText);
        $error.show();
      },
      method: 'POST'
    });
  });

  // Delete event from modal
  $(document).on('click', 'a[data-apply="confirmation"]', (e) => {
  });

  // Switch enable state on block
  $(document).on('change', 'input[name="event-enabled"]', (e) => {
    let $input = $(e.currentTarget);
    let state = $input.prop('checked');
    let $block = $input.closest('.block');
    let identifier = $block.attr('identifier');

    $.ajax({
      url: '/schedule/enable/' + identifier,
      data: { enabled: state },
      beforeSend: function (xhr) {
        let username = $("input#usr").val();
        let password = $("input#pwd").val();
        xhr.setRequestHeader('Authorization', make_base_auth(username, password));
      },
      success: function(response) {
        scheduled[identifier].disabled = !state;
        $('#result').fadeIn(0).delay(2000).fadeOut("fast");
      },
      error: function(response) {
        $input.prop('checked', !state);
        $('#error').fadeIn(0).delay(2000).fadeOut("fast");
      },
      method: 'POST'
    });
  });

  function deleteEvent() {
    let identifier = $modal.attr('identifier');

    $.ajax({
      url: '/schedule/delete/' + identifier,
      beforeSend: function (xhr) {
        let username = $("input#usr").val();
        let password = $("input#pwd").val();
        xhr.setRequestHeader('Authorization', make_base_auth(username, password));
      },
      success: function(response) {
        scheduled[identifier] = null;

        let $block = $('.block[identifier="' + identifier + '"]');
        $block.remove();

        $modal.modal('hide');
        $('#result').fadeIn(0).delay(2000).fadeOut("fast");
      },
      error: function(response) {
        $('#error').fadeIn(0).delay(2000).fadeOut("fast");
      },
      method: 'POST'
    });
  }

  function getDays($modal) {
    let days = [];
    $modal.find('input[day]').each(function () {
      let $this = $(this);
      if ($this.prop('checked'))
        days.push($this.attr('day'))
    });
    return days;
  }

  function getCommands($modal) {
    let groups = [];
    let count = 0;

    $modal.find('.event-commands-edit-container').each(function (index) {
      let $container = $(this);
      let groupIdentifier = $container.attr('identifier');
      let group = {
        "name": groupIdentifier
      }

      let activities = [];

      let $inputs = $container.find('input');
      $inputs.each(function () {
        let $this = $(this);
        if ($this.prop('checked')) {
          count += 1;
          activities.push($this.attr('identifier'));
        }
      });

      if (activities.length == 0)
        return;

      group.activities = activities;
      groups.push(group);
    });
    return [groups, count];
  }
</script>
