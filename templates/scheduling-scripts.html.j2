<script type="text/javascript">
  let _scheduledArray = {{ activities.scheduled | tojson }};
  let scheduled = {};
  for (event of _scheduledArray)
    scheduled[event["id"]] = event;

  let groups = {{ activities.groups | tojson }};
  let now = "{{ now() }}";
  let $modal = $('#configure-event');

  $modal.on('hide.bs.modal', e => {
    $modal.find('[data-toggle=confirmation]').confirmation('hide');
  });

  // Click on new event
  $(document).on('click', '#new-event', e => {
    $modal.find('input[type="text"]').val('');
    $modal.find('input[type="checkbox"]').prop('checked', false);
    $modal.find('input[day]').prop('checked', true);
    $modal.find('input[name="event-enabled"]').prop('checked', true);
    $modal.find('#modal-title').text('New event');
    $modal.find('#error-msg').hide();
    $modal.find('button[name="event-delete"]').hide();
    $modal.modal('show');

    let $trådfriContainer = $modal.find('.event-commands-edit-container[identifier=tradfri]');
    $trådfriContainer.find('.tradfri-inner-container').each((_, element) => {
      initTradfriInModal($(element));
    });
  });

  function initRadioButton($input, checked) {
    $input.prop('checked', checked);
    if (checked)
      $input.attr('checked', checked);
  }

  function initTradfriInModal($groupContainer) {
    // Uncheck all color radio buttons
    let $colorInputs = $groupContainer.find('input.hex-suggestion');
    initRadioButton($colorInputs, false);
    $colorInputs.next('.checkmark').hide();

    let $groupCheckbox = $groupContainer.find('input.group-active');
    $groupCheckbox.prop('checked', false);
    $groupContainer.addClass('inactive');
    $groupContainer.find('.light-state').attr('disabled', true);
    $groupContainer.find('input').not($groupCheckbox).attr('disabled', true);
  }

  // Click on existing event
  $(document).on('click', 'span[name="edit-event"]', e => {
    let $block = $(e.currentTarget).closest('.block');
    let identifier = $block.attr('identifier');
    $modal.attr('identifier', identifier);
    let event = scheduled[identifier];

    $modal.find('[name="event-id"]').val(event.id);
    $modal.find('[name="event-time"]').val(event.time);
    let enabled = !event.disabled && (!event.disabledUntil || event.disabledUntil + "T" + event.time < now);
    $modal.find('input[name="event-enabled"]').prop('checked', enabled);

    // Radio buttons
    $modal.find('input[type="radio"]').removeAttr('checked');

    initRadioButton($modal.find('input[name="wait-for-sunrise"]'), event.waitForSunrise | false);
    initRadioButton($modal.find('input[name="wait-for-sunset"]'), event.waitForSunset | false);
    initRadioButton($modal.find('input[name="on-sunny"]'), event.onSunny | false);
    initRadioButton($modal.find('input[name="on-dark"]'), event.onDark | false);

    $modal.find('[disabled]').removeAttr('disabled');
    // Initiate all disabled radio buttons
    $controlGroups = $('.radio-group[radio-action-selectors]');
    for (controlGroup of $controlGroups) {
      let $controlGroup = $(controlGroup);
      if ($controlGroup.find('input[type="radio"]:checked').length > 0) {
        selectors = $controlGroup.attr('radio-action-selectors');
        disableElements(selectors, true);
      }
    }

    $modal.find('input[name="if-executed-event-id"]').val(event.ifExecutedEventID);

    disabledUntil = null;
    if (event.disabledUntil)
      disabledUntil = event.disabledUntil;
    $modal.find('[name="event-disable-until"]').val(disabledUntil);

    $modal.find('[name="event-fire-once"]').prop('checked', event.fireOnce | false);

    let commands = event["commands"];
    $modal.find('#commands-td input[type="checkbox"]').prop('checked', false);

    for (var index in commands.plain) {
      let array = commands.plain[index];
      let $container = $('[identifier="' + array[1] + '"]');
      let $input = $container.find('[identifier="' + array[0] + '"]');
      $input.prop('checked', true);
    }

    // Trådfri groups
    let $trådfriContainer = $modal.find('.event-commands-edit-container[identifier=tradfri]');
    $trådfriContainer.find('.tradfri-inner-container').each((index, element) => {
      let $groupContainer = $(element);
      let $groupCheckbox = $groupContainer.find('input.group-active');
      let groupID = parseInt($groupCheckbox.attr('identifier'));

      initTradfriInModal($groupContainer);

      // Group checkbox – add/remove disabled attributes
      console.log('event: ', event);
      if ("tradfri" in commands && commands["tradfri"][groupID]) {
        $groupCheckbox.prop('checked', true);
        $groupContainer.removeClass('inactive');
        $groupContainer.find('.light-state').removeAttr('disabled');
        $groupContainer.find('input').not($groupCheckbox).removeAttr('disabled');

        // Set the light state button's backing input checked property
        let groupActions = commands["tradfri"][groupID];
        if (groupActions["light-state"]) {
          let $lightState = $groupContainer.find('.light-state');
          $lightState.addClass('on');
          $lightState.next('input.hidden').prop('checked', true);

          let $pickedColorInput = $groupContainer.find('input[key=color][value=' + groupActions.color + ']');
          $pickedColorInput.prop('checked', true);
          $pickedColorInput.next('.checkmark').show();

          $groupContainer.find('input[key=dimmer]').prop('value', groupActions.dimmer);
        }
      }
      // TODO: Add checkmark for chosen dim value (in thumb possibly?)
    });

    if (!event.hasOwnProperty("days")) {
      $modal.find('#days-td input[type="checkbox"]').prop('checked', true);
    } else {
      let days = scheduled[identifier]["days"];
      $modal.find('#days-td input[type="checkbox"]').prop('checked', false);

      for (var index in days) {
        let day = days[index];
        let $input = $('[day="' + day + '"]');
        $input.prop('checked', true);
      }
    }

    $modal.find('[name="exclude-all-holidays"]').prop('checked', event.excludeAllHolidays | false)
    $modal.find('.excluded-holiday').prop('checked', false);
    if (event.excludedHolidays) {
      for (day of event.excludedHolidays)
        $modal.find('[identifier="' + day + '"]').prop('checked', true);
    }

    if (event.excludeAllHolidays)
      $modal.find('#excluded-holidays-td').parent().hide();
    else
      $modal.find('#excluded-holidays-td').parent().show();

    $modal.find('#modal-title').text('Edit event');
    $modal.find('#error-msg').hide();
    $modal.find('button[name="event-delete"]').show();
    $modal.modal('show');
  });

  // Disable and clear all input elements inside of elements matching the selectors
  function disableElements(selectors, disable, action = "disabled-checked", exclude = undefined) {
    if (!selectors) {
      return;
    }

    selectors = selectors.split(';');
    for (selector of selectors) {
      $element = $(selector);
      if (exclude) {
        $element = $element.not(exclude);
      }
      let isInput = $element.is('input');
      if (action == "disabled-checked") {
        $element.attr('disabled', disable);
        if (isInput) {
          $element.prop('disabled', disable);
          $element.prop('checked', false);
        }
      } else if (isInput && action == "checked") {
        $element.prop('checked', false);
      }
    }
  }

  // Add the ability to deselect radio buttons
  $(document).on('click', 'input[type="radio"]', e => {
    $input = $(e.currentTarget);
    input = e.target;
    $radioGroup = $input.closest('.radio-group');
    if (input.checked) {
      selectors = $radioGroup.attr('radio-action-selectors');
      radioAction = $radioGroup.attr('radio-action');

      if (input.hasAttribute('checked')) {
        // Add ability to remove checked state
        input.checked = !input.checked;
        $input.removeAttr('checked');

        disableElements(selectors, false, radioAction, $input);
        return;
      }

      // Mark this radio button as checked
      $input.attr('checked', true);

      disableElements(selectors, true, radioAction, $input);
    }

    // Deselect any other radio button in this group
    $others = $radioGroup.find('input[type="radio"]').not($input);
    $others.prop('checked', false);
    $others.removeAttr('checked');
  });

  // Clockpicker
  let $input = $('.clockpicker');
  $input.clockpicker({
    autoclose: true,
    placement: 'right',
    align: 'left'
  });

  $input.on('click', e => {
    $(e.currentTarget).clockpicker('show');
  });

  // Datepicker
  $('input[data-toggle="datepicker"]').parent().datepicker({
    format: 'yyyy-mm-dd',
    autoclose: true
  });

  // Delete confirmation
  $('[data-toggle=confirmation]').confirmation({
    rootSelector: '[data-toggle=confirmation]',
    container: 'body',
    onConfirm: deleteEvent,
  });

  // Toggle fire once should disable all days
  $(document).on('change', 'input[name="event-fire-once"]', e => {
    let $input = $(e.currentTarget);
    if ($input.prop('checked'))
      $modal.find('input[day]').attr('disabled', true);
    else
      $modal.find('input[day]').removeAttr('disabled');
  });

  // Hide/show holidays when toggling exclude all holidays
  $(document).on('change', 'input[name="exclude-all-holidays"]', e => {
    let $input = $(e.currentTarget);
    let $td = $modal.find('#excluded-holidays-td');
    $td.parent().show();
    if ($input.prop('checked')) {
      $td.prev('td').velocity("slideUp", {
        duration: 500,
      });
      $td.find('[left], [right]').velocity("slideUp", {
        duration: 500,
      });
    } else {
      $td.prev('td').velocity("slideDown", {
        duration: 500,
        display: "table-cell"
      });
      $td.find('[left], [right]').velocity("slideDown", {
        duration: 500,
      });
    }
  })

  // Save within modal
  $(document).on('click', 'button[name="event-save"]', e => {
    let commandResult = getCommands();
    let groups = commandResult[0];
    let numberOfCommands = commandResult[1];

    let id = $modal.find('input[name="event-id"]').val();
    let time = $modal.find('input[name="event-time"]').val();
    let days = getDays($modal);
    let enabled = $modal.find('input[name="event-enabled"]').prop('checked');
    let disabledUntil = $modal.find('input[name="event-disable-until"]').val();
    let fireOnce = $modal.find('input[name="event-fire-once"]').prop('checked');

    let data = {
      id: id,
      time: time,
      groups: JSON.stringify(groups),
      enabled: enabled
    }

    let waitForSunrise = $modal.find('input[name="wait-for-sunrise"]').prop('checked');
    let waitForSunset = $modal.find('input[name="wait-for-sunset"]').prop('checked');
    let onSunny = $modal.find('input[name="on-sunny"]').prop('checked');
    let onDark = $modal.find('input[name="on-dark"]').prop('checked');
    if (waitForSunrise) {
      data.waitForSunrise = waitForSunrise;
    } else if (waitForSunset) {
      data.waitForSunset = waitForSunset;
    } else if (onSunny) {
      data.onSunny = onSunny;
    } else if (onDark) {
      data.onDark = onDark;
    }

    let ifExecutedEventID = $modal.find('input[name="if-executed-event-id"]').val();
    if (ifExecutedEventID) {
      data.ifExecutedEventID = ifExecutedEventID;
    }

    data.excludeAllHolidays = $('input[name="exclude-all-holidays"]').prop('checked');
    if (!data.excludeAllHolidays)
      data.excludedHolidays = JSON.stringify(getExcludedHolidays());

    if (disabledUntil)
      data.disabledUntil = disabledUntil;

    if (fireOnce)
      data.fireOnce = fireOnce;

    // Only append days if not all days are selected
    if (days.length != 7)
      data.days = JSON.stringify(days);

    let identifier = $modal.attr('identifier');
    if (!identifier)
      endpoint = "new";
    else
      endpoint = "configure/" + identifier;

    $.ajax({
      url: '/schedule/' + endpoint,
      data: data,
      beforeSend: function (xhr) {
        xhr.setRequestHeader('Authorization', get_auth());
      },
      success: function(response) { // Update the data client side
        $modal.modal('hide');

        if (identifier) {
          if (identifier != id)
            scheduled[identifier] = null;

          let $block = $('.block[identifier="' + identifier + '"]');
          $block.attr('identifier', id)
          $block.find('span[name="event-id"]').text(id);
          $block.find('span[name="event-time"]').text(time);

          let commandText = numberOfCommands + " command";
          if (numberOfCommands != 1)
            commandText += "s";
          $block.find('span[name="event-commands"]').text(commandText);

          let daysString = days.length == 7 ? "all" : days.length;
          let dayText = daysString + " day";
          if (days.length != 1)
            dayText += "s";
          $block.find('span[name="event-days"]').text(dayText);

          $block.find('input[name="event-enabled"]').prop('checked', enabled);
        } else {
          $newBlock = $(response.html);
          $('#new-event').before($newBlock);
        }
        scheduled[id] = response.data;

        $('#result').fadeIn(0).delay(2000).fadeOut("fast");
      },
      error: function(response) {
        let responseText = null;
        if (response.status == 400)
          responseText = response.responseText;
        else
          responseText = "Something went wrong. Please try again later."

        let $error = $modal.find('#error-msg');
        $error.html(responseText);
        $error.show();
      },
      method: 'POST'
    });
  });

  // Switch enable state on block
  $(document).on('change', 'input[name="event-enabled"]', e => {
    let $input = $(e.currentTarget);
    let state = $input.prop('checked');
    let $block = $input.closest('.block');
    let identifier = $block.attr('identifier');
    if (!identifier)
      identifier = $modal.attr('identifier');

    $.ajax({
      url: '/schedule/enable/' + identifier,
      data: { enabled: state },
      beforeSend: function (xhr) {
        xhr.setRequestHeader('Authorization', get_auth());
      },
      success: function(response) {
        scheduled[identifier].disabled = !state;
        $('#result').fadeIn(0).delay(2000).fadeOut("fast");
      },
      error: function(response) {
        $input.prop('checked', !state);
        $('#error').fadeIn(0).delay(2000).fadeOut("fast");
      },
      method: 'POST'
    });
  });

  function deleteEvent() {
    let identifier = $modal.attr('identifier');

    $.ajax({
      url: '/schedule/delete/' + identifier,
      beforeSend: function (xhr) {
        xhr.setRequestHeader('Authorization', get_auth());
      },
      success: function(response) {
        scheduled[identifier] = null;

        let $block = $('.block[identifier="' + identifier + '"]');
        $block.remove();

        $modal.removeAttr('identifier');
        $modal.modal('hide');
        $('#result').fadeIn(0).delay(2000).fadeOut("fast");
      },
      error: function(response) {
        $('#error').fadeIn(0).delay(2000).fadeOut("fast");
      },
      method: 'POST'
    });
  }

  function getDays($modal) {
    let days = [];
    $modal.find('input[day]').each((_, element) => {
      let $element = $(element);
      if ($element.prop('checked'))
        days.push($element.attr('day'))
    });
    return days;
  }

  function getCommands() {
    let groups = [];
    let count = 0;

    $modal.find('.event-commands-edit-container').each((_, element) => {
      let $container = $(element);
      let groupIdentifier = $container.attr('identifier');
      let group = {
        "name": groupIdentifier
      };

      var activities;
      if ($container.attr('view') == 'subgroups') {
        // The subgroups view will create this format:
        // {
        //   "name": "tradfri"
        //   "activities": {
        //     "1234" : {
        //       "color": "deadbeef"
        //     },
        //     "467": {
        //       "dimmer": 22
        //     }
        //   }
        // }
        activities = {};
        $container.find('.subgroup').each((_, e) => {
          let $subgroupContainer = $(e);
          if (!$subgroupContainer.find('.group-active').prop('checked')) {
            return;
          }

          let subgroupActivites = {};
          $subgroupContainer.find('input').each((_, e) => {
            let $input = $(e);
            if ($input.attr('disabled')) {
              return;
            }

            let key = $input.attr('key');
            if ($input.attr('value') && key) {
              // Make sure the key doesn't exist. If it does, only store if $input is checked.
              if (!subgroupActivites[key] || $input.prop('checked') || $input.attr('always-store')) {
                subgroupActivites[key] = $input.prop('value');
              }
            } else if (key) {
              subgroupActivites[key] = $input.prop('checked');
            }
          });
          activities[$subgroupContainer.attr('group-id')] = subgroupActivites;
          count += 1;
        });
      } else {
        // The simple view will create this format:
        // {
        //   "name": "mhz433",
        //   "activities": ["1 ON", "4 OFF"]
        // }
        activities = [];

        $container.find('input').each(function () {
          let $this = $(this);
          if ($this.prop('checked')) {
            count += 1;
            activities.push($this.attr('identifier'));
          }
        });

        if (activities.length == 0)
          return;
      }

      group.activities = activities
      groups.push(group);
    });
    return [groups, count];
  }

  function getExcludedHolidays() {
    let holidays = [];

    $('#excluded-holidays-td').find('input[type="checkbox"]').each((_, element) => {
      let $input = $(element);
      if ($input.prop('checked')) {
        holidays.push($input.attr('identifier'));
      }
    });
    return holidays;
  }
</script>
